(cps, getNow) <- bpsUtils

(d1, t1) <- superDirtSetters getNow

(d2, t2) <- superDirtSetters getNow

(d3, t3) <- superDirtSetters getNow

(d4, t4) <- superDirtSetters getNow

(d5, t5) <- superDirtSetters getNow

(d6, t6) <- superDirtSetters getNow

cps (105 / 120)

let hush = mapM_ ($ silence) [d1,d2,d3,d4,d5,d6,d7,d8,d9]

let solo = (>>) hush

d1 silence

-- complex drums

d1 $ every 4 (const $ stack [
  sound "hh(3,8)",
  sound "bd bd ~ cp"
]) $ every 2 (const $ stack [
  sound "hh(7,8)",
  sound "bd(3,8,1)"
]) $ every 8 (slow 2) $ stack [
    sound "hh(5,8)",
    sound "bd(5,8,1)"
    ]

d2 $ every 16 (rev) $
  every 4 (const $ stack [
  every 16 (density 4) $ every 4 (slow 2) $ s "oh hi oh alphabet" # n "0 0 1 3" # gain "1 1 1 0.7",
  sound "909:1*2 ~*4"
  ]) $ stack [
    every 16 (density 4) $ sound "oh hh oh ~",
    sound "909:1"
    ]

-- round 2

d1 $ every 4 (const $ stack [
  sound "hh(3,4)",
  sound "bd bd co ~"
]) $ every 2 (const $ stack [
  sound "hh(2,8)",
  sound "bd(1,8,1)"
]) $ every 8 (slow 2) $ stack [
    sound "oh([3 5]/2,8)",
    sound "co([5 3]/2,8)" # gain "[1 0.8]*4",
    sound "bd(7,8,1)" # speed "0.8" # gain "[1 0.7]*4"
    ]

-- patterns over patterns

d1 $ e 2 8 $ sound "bd hh"

d1 $ every 4 (e 3 8) $ sound "[bd hh]"

d1 $ every 4 (e 3 8) $ sound "[bd [hh*2] bd hh]"

-- mix it up a bit! degrade removes events randomly

d1 $ every 4 (e 3 8) $ every 2 (degradeBy 0.5) $ sound "[bd [hh*2] bd hh]"

-- compare this:

d1 $ (e 5 16) $ sound "[ch bd ch hh]"

-- to this:

d1 $ stack [
  sound "ch(1,16)",
  sound "ch(2,16,2)",
  sound "bd(1,16,6)",
  sound "hh(2,16,4)"
  ]


d1 silence

-- throw in some synth chords

d2 $ every 8 (# speed "[2,4]")
   $ every 6 (# speed "[3,5]")
   $ s "moog/2" # n "0" # speed "[1,2]"
   # gain "0.8"

d2 $ every 8 (# speed "1.0625") $ every 4 (density 2)
   $ up "-8 -8*2 -5.125*2 -3.375" # sound "arpy" # gain (slow 2 $ scale 0.6 1 $ sine1)



d2 $ silence

hush
