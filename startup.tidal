(cps, getNow) <- bpsUtils

(d1, t1) <- superDirtSetters getNow

(d2, t2) <- superDirtSetters getNow

(d3, t3) <- superDirtSetters getNow

(d4, t4) <- superDirtSetters getNow

(d5, t5) <- superDirtSetters getNow

(d6, t6) <- superDirtSetters getNow

(d7, t7) <- superDirtSetters getNow

(d8, t8) <- superDirtSetters getNow

-- useful functions, somewhat 'borrowed' from other tidal'ers like yaxu and kindohm and etc.

let every' n o f = when ((== (o-1)) . (`mod` n)) f
    ghost'' a f p = superimpose (((a/2 + a*2) ~>) . f) $ superimpose (((a + a/2) ~>) . f) $ p
    ghost' a p = ghost'' a ((|*| gain "0.7") . (|=| end "0.2") . (|*| speed "1.25")) p
    ghost p = ghost' 0.125 p
    delayline' a g p = ghost'' a ((|*| gain g) . (|=| end "0.2")) p
    delayline p = delayline' 0.125 "0.6" p
    choose xs = (xs !!) <$> (irand $ fromIntegral $ length xs)
    degradeFill a b = (density a) . (degradeBy b)
    shiftdown p = superimpose ((sometimes (rev)) . (# speed "0.67") . (# gain "0.75") . (0.25 ~>)) p
    fastecho p = superimpose ( (rev) . (0.125 ~>) . (# gain "0.85")) p

import Sound.Tidal.Scales

--let toScale::[Int] -> Pattern Int -> Pattern Int
--    toScale s p = (+) <$> fmap (s!!) notep <*> fmap (12*) octp
--      where notep = fmap (`mod` (length s)) p
--            octp  = fmap (`div` (length s)) p

let (lforate, _) = pF "lforate" (Just 0)
    (vrate, _) = pF "vrate" (Just 0)
    (lfowidth, _) = pF "lfowidth" (Just 0)
    (cutoff, _) = pF "cutoff" (Just 0)
    (cutfreq, _) = pF "cutfreq" (Just 0)
    (rq, _) = pF "rq" (Just 0)
    (gate, _) = pF "gate" (Just 0)
    (modamp, _) = pF "modamp" (Just 0)
    (vibrato, _) = pF "vibrato" (Just 0)
    (perc, _) = pF "perc" (Just 0)
    (percf, _) = pF "percf" (Just 0)
    (note2, _) = pF "note2" (Nothing)
    (note3, _) = pF "note2" (Nothing)
    (degree, degree_p) = pF "degree" (Nothing)
    (ctranspose, ctranspose_p) = pF "ctranspose" (Nothing)
    (mtranspose, mtranspose_p) = pF "mtranspose" (Nothing)
    (gtranspose, gtranspose_p) = pF "gtranspose" (Nothing)
    (harmonic, harmonic_p) = pF "harmonic" (Nothing)
    (detune, detune_p) = pF "detune" (Nothing)
    (scale, scale_p) = pS "scaleName" (Nothing)
    (tuning, tuning_p) = pS "tuningName" (Nothing)
    (stepsPerOctave, stepsPerOctave_p) = pI "stepsPerOctave" (Nothing)
    (octaveRatio, octaveRatio_p) = pF "octaveRatio" (Nothing)


hush
