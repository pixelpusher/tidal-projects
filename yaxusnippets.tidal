-- Tidal snippets

d1 $ do a <- slow 2 tri1
        b <- slow 4 tri1
        within (toRational a, toRational b) (density 8) $ sound "bd arpy:1 arpy:2 arpy:5"


[8:22]
putting things into a `do` block allows you to break down the construction of a pattern into steps, where `<-` turns patterns of values into a value, which you can then pass to functions like `within` (edited)


-- 4 beat
d1 $ spin (2) $ sound "odx*4"
            |+| speed "2.5"


d1 $ smash 4 [1,0.5] $ sound "odx*6"
  |+| speed "0.55"


d1 $ spin (4) $ smash 4 [1,0.5] $ sound "odx*4"
      |+| speed "0.55"


d2 $ smash 3 [1,3,0.5] $ sound "hh([3,5,8],16)"
  # delay "0.2"

-- choppy 3 beat
d1 $ spin (3) $ smash 3 [1,3,0.5] $ sound "odx*4"
        |+| speed "0.55"
        |+| gain "0.65"

d1 $ stack [
  sound "bd([5,3]/2,8)",
  sound "perc:4*4",
  chop 256 $ sound "ho(4/2,8)"
  ]
  # delay "0.1"

cps (105 / 60)

cps 105/120

d3 $ sound "porsche:4/32"
  # gain "0.9"

d2 $ stack [
  sound "909(2/8,16)",
  sound "cp(2/4,8,2)",
  sound "sn:6(1/2,4)"
]

d2 $ spin (2) $ stack [
  chop 2 $ sound "[arpy:3 ~]*2, [~ arpy:8]*2",
  every 2 (rev) $ sound "[sn:3 ~]*2, [~ sn:8]*2",
  every 4 (rev) $ sound "bd(3,4)",
  sound "[co]*8" # gain "0.7" # delay "0.1"
] # up ( iter 2 "[3 5]/2")




d1 silence

d2 silence

d3 silence

-- move densities between sounds
d1 $ jux (iter 4) $ spread' density (iter 4 "1 8 2 4") $ sound "bd sd8:2 bd sd8"

-- drum solo
d1 $ stack [slowspread density [1,64,1,4,1,3,1,12] $ striate 8 $ sound "[bd sn/2 [~ bd] sn/2]/4"
                      |+| speed "0.9"
                      |+| pan "1",
                      slowspread density [1,128,1,4,1,3,1,12] $ striate 4 $ sound "[bd sn/2 [~ bd] sn/2]/4"
                      |+| speed "0.9"
                      |+| pan "0"
                     ]

-- new romatics
d1 $ (superimpose (iter 2) $ sound (pick <$> "bd arpy voodoo arpy" <*> "[1 2 3 4]/3"))
            |+| speed "[1 0.5 1 0.25]/3"


d2 $ iter 2 $ sound "bd bd arpy"

d2 $ iter 2 $ chop 2 $ sound "bd bd arpy"

-- these two... dark
d2 $ iter 2 $ chop 32 $ sound "bd arpy"

d1 $ gap 8 $ sound "jvbass"

d1 $ every 4 (rev) $ gap 8 $ sound "jvbass"

d2 $ iter 2 $ sound "hh(8,3) hh(4,3)" # gain "1.1"


d2 $ stack [
  sound "hh(8,6)" # gain "1.2",
  sound "ho(2,6)" # gain "0.7"
  ]

d2 $ every 8 (rev)
   $ every 16 (density 2)
   $ stack [
   sound "hh(8,6)" # gain "1.2",
   sound "ho(2,6)" # gain "0.7"
   ]

d2 silence

d3 $ gap 4 $ sound (pick <$> "bass1*4" <*> "[1 4 2 0]") # up (iter 6 "[-2 -3 -1 -4]")

d3 $ every 4 (gap 2) $ gap 16 $ every 8 (rev) $ sound (pick <$> "bass1*4" <*> "[1 4 2 0]") # up (iter 6 "[-2 -3 -1 -4]")

d3 $ density 2 $ sound (pick <$> "bass1(3,3)" <*> "[4 4 1 2]") # up (iter 6 "[-2 -3 -1 -4]")


d3 silence

-- fast
d3 $ iter 2 $ sound "cp cp:2([2 3],6)"
  |+| gain "0.85"

-- faster
d3 $ iter 2 $ sound "cp cp:2([2 3 2 6],6)"
  |+| gain "0.85"

-- complex longer
d3 $ iter 2 $ every 3 (density 2) $ sound "cp cp:2([2 3 2 6],6)"
    |+| gain "0.85"

-- complex shorter
d3 $ every 3 (density 2) $ iter 2 $ sound "cp cp:2([2 3 2 6],6)"
    |+| gain "0.85"

-- complex shorter
d3 $ every 6 (density 2) $ sound "cp cp:2([2 3 2 6],6)"
    |+| gain "0.85"


d1
  $ every 3 (|+| speed sine1)
  $ stack [
    sound "bd(3,8)",
    sound "~ [~ [ho:2 hc/2]]" # cut "1",
    sound "~(2,5) cp(2,5)" # gain "0.85" # cut "0.1"
  ]
  # speed "1 2"

d1
  $ every 3 (|+| speed sine1)
  $ stack [
    sound "bd(3,8)",
    sound "~ [~ [ho:2 hc/2]]" # cut "1"
  ]
  # speed "1 2"

d1 silence

d1 $ every 3 (|+| speed sine1) $ sound "bd*2" # speed "1 2"

d1 $ sound "porsche:2"


d1 $ cat [sound "bd sn", sound "arpy jvbass"]


d1 silence

d2 silence

d3 silence
